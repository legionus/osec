#!/bin/sh -eu
# osec.cron
#
# This file is part of Osec (lightweight integrity checker)
# Copyright (c) 2002-2007 by Stanislav Ievlev
# Copyright (c) 2008-2009 by Alexey Gladkov
#
# This file is covered by the GNU General Public License,
# which should be included with osec as the file COPYING.
#

PROG="${0##*/}"
CONFDIR='/etc/osec'
EXCLUDE_FILE=
IGNORE_FIELDS=
NICE_ARGS=
IONICE_ARGS='-t'

. "$CONFDIR/pipe.conf"

DATABASE_DIR='/var/lib/osec'

syslog()
{
	local log
	if log="$(which logger 2>/dev/null)"; then
		SHREQ=0 "$log" -p user.info -t "osec[$$]" "$*" ||:
	fi
}

TEMPFILE=
exit_handler()
{
	local rc=$?
	trap - EXIT
	[ -z "$TEMPFILE" ] ||
		rm -rf -- "$TEMPFILE"
	[ "$rc" = 0 ] ||
		syslog "Aborted rc=$rc"
        exit $rc
}

cmd=
if [ -n "${NICE_PRIORITY-}" ] && nice_cmd="$(which nice 2>/dev/null)"; then
	$nice_cmd -n "$NICE_PRIORITY" true 2>/dev/null &&
		cmd="$nice_cmd $NICE_ARGS -n $NICE_PRIORITY --"
fi

if [ -n "${IONICE_PRIORITY-}" ] && ionice_cmd="$(which ionice 2>/dev/null)"; then
	$ionice_cmd -t -c $IONICE_PRIORITY true 2>/dev/null &&
		cmd="$cmd $ionice_cmd $IONICE_ARGS -c $IONICE_PRIORITY --"
fi


trap exit_handler HUP PIPE INT QUIT TERM EXIT
TEMPFILE="$(mktemp -t "$PROG.XXXXXX")"

syslog "Started"

if [ ! -d "$DATABASE_DIR/.dbver1" ]; then
	syslog "Migration to new database format started"
	for db in "$DATABASE_DIR/osec.cdb".*; do
		[ "$db" != "$DATABASE_DIR/osec.cdb.*" ] ||
			break
		$cmd /usr/bin/osec-migrade-db -D "$DATABASE_DIR" "$db"
	done
	mkdir "$DATABASE_DIR/.dbver1"
	syslog "Migration finished"
fi

# Prepare osec arguments
if [ -n "${EXCLUDE_FILE-}" ]; then
	if [ ! -f "$EXCLUDE_FILE" ]; then
		printf '%s\n' "$EXCLUDE_FILE: Not found, parameter EXCLUDE will be ignored" >&2
		syslog "$EXCLUDE_FILE: Not found, parameter EXCLUDE will be ignored"
	else
		EXCLUDE_FILE=
	fi
fi

(
	rc=0
	$cmd /usr/bin/osec \
		${EXCLUDE_FILE:+-X "$EXCLUDE_FILE"} \
		${IGNORE_FIELDS:+-i "$IGNORE_FIELDS"} \
		-D "$DATABASE_DIR" \
		-f "$CONFDIR/dirs.conf" ||
		rc=$?
	if [ $rc -ne 0 ]; then
		echo "Program exited abnormally, exit code = $rc" >&2
		syslog "/usr/bin/osec exited abnormally, exit code = $rc"
	fi
) | eval "$REPORT_PIPE" >"$TEMPFILE"

ADDED=0 REMOVED=0 CHANGED=0
while read l; do
	case "$l" in
		'No changes')
			[ -z "${IGNORE_NO_CHANGES-}" ] ||
				exit 0
			;;
		'New files added to control:')	t='ADDED'	;;
		'Changed controlled files:')	t='CHANGED'	;;
		'Removed from control:')	t='REMOVED'	;;
		'- /'*) [ -z "${t-}" ] || eval "$t=\$((\$t+1))"	;;
	esac
done < "$TEMPFILE"

STAT="chg=$CHANGED,add=$ADDED,del=$REMOVED"
export ADDED REMOVED CHANGED STAT

cat "$TEMPFILE" |eval "$SEND_PIPE"

syslog "Finished"
